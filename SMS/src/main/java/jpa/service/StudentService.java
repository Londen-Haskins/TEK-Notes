package jpa.service;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.EntityManagerFactory;
import javax.persistence.TypedQuery;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import jpa.dao.StudentDAO;
import jpa.entitymodels.Course;
import jpa.entitymodels.Student;

public class StudentService implements StudentDAO{

	// This method reads the student table in your database and returns the data as a List<Student>
	public List<Student> getAllStudents() {
				
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();

		String hql = "FROM Student s";

		TypedQuery<Student> query = session.createQuery(hql, Student.class);

		List<Student> result = query.getResultList();
		for (Student u : result) {
	    	 System.out.println("Email: " +u.getSEmail() + "|" + " Name:" + u.getSName() +"|"+ "Password: " + u.getSPass());
	    }

		t.commit();
		factory.close();
		session.close();

		return result;
	}

	// This method takes a Student’s email as a String and parses the student list for a Student with that email and returns a Student Object.
	public Student getStudentByEmail(String inputEmail) {
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();

		String hql = "FROM Student s WHERE s.sEmail=:email";
		TypedQuery<Student> query = session.createQuery(hql, Student.class);
		query.setParameter("email",inputEmail);
		
		Student result = query.getSingleResult();
		
		t.commit();
		factory.close();
		session.close();
		
		
		return result;
	}

	// This method takes two parameters: the first one is the user email and the second one is the password from the user input.
	// Return whether or not a student was found.
	public boolean validateStudent(String inputEmail, String inputPass) {
		
		boolean validated = false;
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();

		String hql = "SELECT s FROM Student s WHERE s.sEmail=:email AND s.sPass=:password";
		TypedQuery<Student> query = session.createQuery(hql, Student.class);
		query.setParameter("email",inputEmail);
		query.setParameter("password",inputPass);
		
		try {
			Student result = query.getSingleResult();
			validated = true;
			System.out.println("User is valid");
		}catch(Exception e) {
			validated = false;
			System.out.println("User is invalid");
		}
				
		t.commit();
		factory.close();
		session.close();
		
		return validated;
	}

	// After a successful student validation, this method takes a Student’s email and a Course ID.
	//It checks in the join table (i.e. Student_Course) generated by JPA to find if a Student with that Email is currently attending a Course with that ID
	public void registerStudentToCourse(String inputEmail, int inputId) {
		
		boolean registered = false;
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();
		
		String studentHql = "SELECT s FROM Student s WHERE s.sEmail=:email";
		TypedQuery<Student> scQuery = session.createQuery(studentHql, Student.class);
		scQuery.setParameter("email",inputEmail);
		
		//Query to get the Student as an object
		try {
			Student tempS = scQuery.getSingleResult();
			//Try to query for that student's courses
			try {
				List<Course> tempCourses = new ArrayList<Course>();
				tempCourses.addAll(tempS.getSCourses());
				//Look through courses for specific class
				for(Course temp: tempCourses) {
					//If a match is found
					if(temp.getCId() == inputId) {
						registered = true;
						System.out.println("User already registered for course");
					}
				}
				//If student isn't registered, register them
				if(!registered){
					String courseHql = "SELECT c FROM Course c WHERE c.cId=:id";
					TypedQuery<Course> csQuery = session.createQuery(courseHql, Course.class);
					csQuery.setParameter("id",inputId);
					Course newCourse = csQuery.getSingleResult();
					tempS.getSCourses().add(newCourse);
					newCourse.getStudents().add(tempS);
					session.persist(tempS); //Save student to database
					session.persist(newCourse);
				}
			}catch(Exception e) {
				System.out.println("User courses not found");
			}

		}catch(Exception e){
			System.out.println("Can't find User");
		}
		t.commit();
		factory.close();
		session.close();
	}

	// This method takes a Student’s Email as a parameter and would find all the courses a student is registered for.
	public List<Course> getStudentCourses(String inputEmail) {
		
		List<Course> courseSet = new ArrayList<Course>();
		Course courTbl = new Course();
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();
		
		String studentHql = "SELECT s FROM Student s WHERE s.sEmail=:email";
		TypedQuery<Student> scQuery = session.createQuery(studentHql, Student.class);
		scQuery.setParameter("email",inputEmail);
		try {
			Student tempS = scQuery.getSingleResult();
			try {				
				courseSet.addAll(tempS.getSCourses());
								
			}catch(Exception e) {
				System.out.println("User courses not found");
			}

		}catch(Exception e){
			System.out.println("Can't find User");
		}
		
		return courseSet;
	}

}
